// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portal.Models;

namespace Portal.BE.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200302140436_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Portal.Models.ApplicationUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<long>("RetryTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("UserStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Portal.Models.PageDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Portal.Models.PermissionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Portal.Models.PermissionDataDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FilterName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FilterType")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FilterValue")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionData");
                });

            modelBuilder.Entity("Portal.Models.PermissionPageMappingDAO", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionId", "PageId")
                        .HasName("PK_PermissionAction");

                    b.HasIndex("PageId");

                    b.ToTable("PermissionPageMapping");
                });

            modelBuilder.Entity("Portal.Models.ProviderDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("ProviderTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.HasKey("Id");

                    b.HasIndex("ProviderTypeId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Portal.Models.ProviderTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ProviderType");
                });

            modelBuilder.Entity("Portal.Models.RoleDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Portal.Models.SiteDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Portal.Models.UserRoleMappingDAO", b =>
                {
                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("ApplicationUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleMapping");
                });

            modelBuilder.Entity("Portal.Models.UserStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("Portal.Models.ApplicationUserDAO", b =>
                {
                    b.HasOne("Portal.Models.ProviderDAO", "Provider")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_ApplicationUser_Provider")
                        .IsRequired();

                    b.HasOne("Portal.Models.UserStatusDAO", "UserStatus")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserStatusId")
                        .HasConstraintName("FK_ApplicationUser_UserStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Models.PermissionDAO", b =>
                {
                    b.HasOne("Portal.Models.RoleDAO", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Permission_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Models.PermissionDataDAO", b =>
                {
                    b.HasOne("Portal.Models.PermissionDAO", "Permission")
                        .WithMany("PermissionDatas")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionData_Permission")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Models.PermissionPageMappingDAO", b =>
                {
                    b.HasOne("Portal.Models.PageDAO", "Page")
                        .WithMany("PermissionPageMappings")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PermissionPageMapping_Page")
                        .IsRequired();

                    b.HasOne("Portal.Models.PermissionDAO", "Permission")
                        .WithMany("PermissionPageMappings")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionAction_Permission")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Models.ProviderDAO", b =>
                {
                    b.HasOne("Portal.Models.ProviderTypeDAO", "ProviderType")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderTypeId")
                        .HasConstraintName("FK_Provider_ProviderType")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Models.UserRoleMappingDAO", b =>
                {
                    b.HasOne("Portal.Models.ApplicationUserDAO", "ApplicationUser")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_UserRoleMapping_ApplicationUser")
                        .IsRequired();

                    b.HasOne("Portal.Models.RoleDAO", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoleMapping_Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
