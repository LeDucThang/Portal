// <auto-generated />
using System;
using Auth.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Auth.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Auth.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<long>("RetryTime")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Auth.Models.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Auth.Models.ProviderType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ProviderType");
                });

            modelBuilder.Entity("Auth.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Auth.Models.Site", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Auth.Models.UserRoleMapping", b =>
                {
                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("ApplicationUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleMapping");
                });

            modelBuilder.Entity("Auth.Models.UserStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("Auth.Models.ApplicationUser", b =>
                {
                    b.HasOne("Auth.Models.Provider", "Provider")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_ApplicationUser_Provider")
                        .IsRequired();

                    b.HasOne("Auth.Models.UserStatus", "Status")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ApplicationUser_UserStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.Models.Provider", b =>
                {
                    b.HasOne("Auth.Models.ProviderType", "Type")
                        .WithMany("Provider")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Provider_ProviderType")
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.Models.UserRoleMapping", b =>
                {
                    b.HasOne("Auth.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoleMapping")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_UserRoleMapping_ApplicationUser")
                        .IsRequired();

                    b.HasOne("Auth.Models.Role", "Role")
                        .WithMany("UserRoleMapping")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoleMapping_Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
